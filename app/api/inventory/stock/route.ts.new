import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";

export async function GET() {
  try {
    const stocks = await prisma.stock.findMany({
      orderBy: {
        createdAt: "desc",
      },
    });
    return NextResponse.json(stocks);
  } catch (error) {
    console.error("Error fetching stocks:", error);
    return NextResponse.json({ error: "Error fetching stocks" }, { status: 500 });
  }
}

export async function POST(request: Request) {
  try {
    const data = await request.json();
    const stock = await prisma.stock.create({
      data: {
        barcodeId: data.barcodeId,
        name: data.name,
        description: data.description,
        quantity: data.quantity,
        price: data.price,
      },
    });
    return NextResponse.json(stock);
  } catch (error) {
    console.error("Error creating stock:", error);
    return NextResponse.json({ error: "Error creating stock" }, { status: 500 });
  }
}

export async function PUT(request: Request) {
  try {
    const data = await request.json();
    const stock = await prisma.stock.update({
      where: {
        id: data.id,
      },
      data: {
        name: data.name,
        description: data.description,
        quantity: data.quantity,
        price: data.price,
      },
    });
    return NextResponse.json(stock);
  } catch (error) {
    console.error("Error updating stock:", error);
    return NextResponse.json({ error: "Error updating stock" }, { status: 500 });
  }
}

export async function DELETE(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    const id = searchParams.get("id");

    if (!id) {
      return NextResponse.json({ error: "Stock ID is required" }, { status: 400 });
    }

    await prisma.stock.delete({
      where: {
        id,
      },
    });

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error("Error deleting stock:", error);
    return NextResponse.json({ error: "Error deleting stock" }, { status: 500 });
  }
} 